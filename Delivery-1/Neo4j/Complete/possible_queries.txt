
//how to set parameters in neo4j
:param code => "aaa"


//-------------------------------------------------------
//-------------------------------------------------------

//currently infected people
MATCH (p:Person)-[]-(tp:Test{positive:True})
OPTIONAL MATCH (p)-[]-(tf:Test{positive:False})
WITH p,max(tp.date) AS tp, max(tf.date) AS tf
WHERE tf IS NULL OR tp>tf
RETURN p

//-------------------------------------------------------
//-------------------------------------------------------


//first level contacts
//I assume that he is still infected now: contacts from 14 days before infection_time till today
:param code => "XXXXXXXXXXXXXX12";
:param infection_date => "2021-11-10"; //not today: from the time the test is done to the time it is rocessed and inserted some time pass
MATCH (i:Person{code:$code})
WITH i,datetime({epochmillis:apoc.date.parse($infection_date, "ms", "yyyy-MM-dd")}) AS infection_time
CALL {
	WITH i,infection_time 
	MATCH (i)-[r:MEETS]-(c:Person) 
	WHERE duration.inDays(c.time,infection_time).days<=14
	RETURN c, r.time AS contact_end_time
	UNION
	WITH i,infection_time 
	MATCH (i)-[pi:PARTICIPATES]->(:Aggregation)<-[pc:PARTICIPATES]-(c:Person) 
	WHERE ( (pi.start_time<pc.start_time AND pc.start_time<=pi.end_time) OR (pi.start_time>=pc.start_time AND pi.start_time<=pc.end_time) )
	//can't use min([pi.end_time,pc.end_time]: it requires an UNWIND
	WITH c, ( CASE pi.end_time<pc.end_time WHEN true THEN pi.end_time ELSE pc.end_time END ) AS contact_end_time
	WHERE  duration.inDays(contact_end_time,infection_time).days<=14
	RETURN c, contact_end_time
	UNION
	WITH i,infection_time 
	MATCH (i)-[r:FREQUENTS]-(c:Person) 
	WHERE duration.inDays(r.start_time,infection_time).days<=14 OR r.end_time IS NULL OR duration.inDays(r.end_time,infection_time).days<=14
	RETURN c, r.end_time AS contact_end_time
	//notice that the last part may return contact_end_time=null if the relation hasn't ended yet.
	//You may prefer today with ( CASE r.end_time WHEN null THEN datetime() ELSE r.end_time END) AS contact_end_time
	//where datetime() return the current time
}
WITH c, max(contact_end_time) AS contact_time
WHERE NOT EXISTS { MATCH (c)-[:DOES]-(t:TEST{positive:False}) WHERE contact_time IS NOT NULL AND t.date>contact_time }
RETURN DISTINCT c AS contact
//UNION MATCH (i:Person{code:$code}) RETURN i AS c


//first level contact for each currently infected person
//obviusly created placing the other 2 queries one after the other
//do not put a date, or you should also find a limit to when the contact occur (in the previous one, we could assume the person to be still infected)
MATCH (i:Person)-[]-(tp:Test{positive:True})
OPTIONAL MATCH (i)-[]-(tf:Test{positive:False})
WITH i,max(tp.date) AS tp, max(tf.date) AS tf
WHERE tf IS NULL OR tp>tf
WITH i,tp AS infection_time
CALL {
	WITH i,infection_time 
	MATCH (i)-[r:MEETS]-(c:Person) 
	WHERE duration.inDays(c.time,infection_time).days<=14
	RETURN c, r.time AS contact_end_time
	UNION
	WITH i,infection_time 
	MATCH (i)-[pi:PARTICIPATES]->(:Aggregation)<-[pc:PARTICIPATES]-(c:Person) 
	WHERE ( (pi.start_time<pc.start_time AND pc.start_time<=pi.end_time) OR (pi.start_time>=pc.start_time AND pi.start_time<=pc.end_time) )
	WITH c, ( CASE pi.end_time<pc.end_time WHEN true THEN pi.end_time ELSE pc.end_time END ) AS contact_end_time
	WHERE  duration.inDays(contact_end_time,infection_time).days<=14
	RETURN c, contact_end_time
	UNION
	WITH i,infection_time 
	MATCH (i)-[r:FREQUENTS]-(c:Person) 
	WHERE duration.inDays(r.start_time,infection_time).days<=14 OR r.end_time IS NULL OR duration.inDays(r.end_time,infection_time).days<=14
	RETURN c, r.end_time AS contact_end_time
}
WITH c, max(contact_end_time) AS contact_time
WHERE NOT EXISTS { MATCH (c)-[:DOES]-(t:TEST{positive:False}) WHERE contact_time IS NOT NULL AND t.date>contact_time }
RETURN DISTINCT c AS contact




//ok, now let's try with path and conditions on nodes[i-1],nodes[i], nodes[i+1]
//maybe I'll ned a special query for the first step, then check that nodex[1] is in taht result
//idea: given 3 person connected (excluding intermediate nodes) as (i)-(j)-(k),
//I want that there is a contact (check times) between i and j, and between j and k,
//and that the contact j-k ends after the contact i-j has ended
:param steps => 1
MATCH (infected:Person{code:$code})
WITH infected,datetime({epochmillis:apoc.date.parse($infection_date, "ms", "yyyy-MM-dd")}) AS infection_time
MATCH path = (infected)-[:FREQUENTS|:MEETS|:PARTICIPATES*1..]-(c:Person)
UNWIND nodes(path) as path_node
WITH infected, infection_time, path, path_node
WHERE path_node:Person
WITH infected, infection_time, path, count(path_node) AS steps
WHERE steps = $steps+1
WITH infected, infection_time, path //now I have path with $steps+1 people (including the infected)
WITH infected, i + nodes(path) AS nodes, relationship(path) AS arcs //arcs[i] connects node i to i+1, notice that I insert infected as nodes[0]
WHERE ALL ( i in Range(0, length(steps) - 2) WHERE (NOT nodes[i]:Person)  OR (
		()
))

//second level contacts----------------------------------------------------------------------

//maybe using apoc.custom.asFunction may be useful to save and re use query
//second level without considering tests, should work properly
MATCH (i:Person{code:$code})
CALL {
	WITH i MATCH (i)-[r:MEETS]-(c:Person) WHERE datetime({epochmillis:apoc.date.parse(r.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse($start_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	RETURN c, r.time AS time
	UNION
	WITH i MATCH (i)-[:PARTICIPATES]-(e:Event)-[:PARTICIPATES]-(c:Person) WHERE datetime({epochmillis:apoc.date.parse(e.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse($start_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	
	RETURN c, e.time AS time #e.start_time with the full DB
	#eventually union the other type of relationship
}
WITH c AS first, max(time) AS first_contact_time
CALL {
	WITH first,first_contact_time MATCH (first)-[r:MEETS]-(c:Person) WHERE datetime({epochmillis:apoc.date.parse(r.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse(first_contact_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	RETURN c, r.time AS time
	UNION
	WITH first,first_contact_time MATCH (first)-[:PARTICIPATES]-(e:Event)-[:PARTICIPATES]-(c:Person) WHERE datetime({epochmillis:apoc.date.parse(e.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse(first_contact_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	RETURN c, e.time AS time #e.start_time with the full DB
	#eventually union the other type of relationship
}
WITH c #now remove the infected and the first level contacts (if you want all the first elvel cotnact ,remove the infected and add them, because now you have only the first level contacts that were in contact with another first level contact)
WHERE c.code<>$code #not the infected... may be moved in the subquery
CALL { #find the first level contact again to remove them
	MATCH (i:Person{code:$code})-[r:MEETS]-(first:Person) WHERE r.time>=$start_time #should be => datetime({epochmillis:apoc.date.parse(r.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse($infection_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	RETURN first
	UNION
	MATCH (i:Person{code:$code})-[:PARTICIPATES]-(e:Event)-[:PARTICIPATES]-(first:Person) WHERE e.time>=$start_time #should be => datetime({epochmillis:apoc.date.parse(e.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse($infection_time, "ms", "yyyy-MM-dd HH:mm:ss")})
	RETURN first
	#eventually union the other type of relationship
}
WITH c,collect(first) as first
WHERE NOT c IN first
RETURN c

//statistcs----------------------------

//currently infected people (repeated)
MATCH (p:Person)-[]-(tp:Test{positive:True})
OPTIONAL MATCH (p)-[]-(tf:Test{positive:False})
WITH p,max(tp.date) AS tp, max(tf.date) AS tf
WHERE tp>tf
RETURN p

//people infected at a given date
//a person is considered infected if she/he did a positive test before that date
//and no negative test before that date and after the positive one
//(with before that date we consider that date too, assuming that both test and the date have time 00:00:00)
:param date => "2021-06-21" //date to consider
WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS infection_date
MATCH (p:Person)-[]-(t_p:Test{positive:True}) WHERE t_p.date<=infection_date
OPTIONAL MATCH (p)-[]-(t_n:Test{positive:False}) WHERE t_n.date<=infection_date
WITH p,max(t_p.date) AS tp, max(t_n.date) AS tf, infection_date
WHERE tp>tf
RETURN p

//people infected at a given date
//divided by age interval (return the count for each interval)
//a person is considered infected if she/he did a positive test before that date
//and no negative test before that date and after the positive one
//(with before that date we consider that date too, assuming that both test and the date have time 00:00:00)
//it returns the number of infected for each abe interval (identified by its start age)
:param date => "2021-11-25"; //date to consider
:param ages => [12,18,30,50,70]; //divide age intervals: [0,11],[12,18],...,[70,infinte]

WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS infection_date
MATCH (p:Person)-[]-(t_p:Test{positive:True}) WHERE t_p.date<=infection_date
OPTIONAL MATCH (p)-[]-(t_n:Test{positive:False}) WHERE t_n.date<=infection_date
WITH p,max(t_p.date) AS tp, max(t_n.date) AS tf, infection_date
WHERE tp>tf
WITH p.code AS code, duration.inMonths(p.birth_date,infection_date).years AS age
UNWIND [0]+$ages AS step //add the 0
//I need code to prevent it from grouping people with the same age when I use aggregation functions to determine it's age range
WITH code, age, step
WHERE age>=step
WITH code, max(step) AS start_age_interval
RETURN start_age_interval, count(code) AS number_infected
ORDER BY start_age_interval

//Just test for with
UNWIND [1,2,1,3,3,4] AS p
UNWIND [1,2,3,4] AS a
WITH p,a
RETURN p,a //ok, it returns duplicates (e.g. 1,1 is returned 2 times)
//Just test for with
UNWIND [1,2,1,3,3,4] AS p
UNWIND [1,2,3,4] AS a
WITH p,max(a)
RETURN p,a //ok, it compress as the sql GROUP by and return a row for each different p

//first n cities for #infected
//at a given date
//if the person changes home at that date, it is considered in the new address
//tie break: let neo4j choose which city to choose
:param n => 10; //number of cities to show
:param date => "2021-10-10";
WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS date
MATCH (city:City)<-[:SITUATED_IN]-(:Place)<-[lives:LIVES]-(p:Person)-[:DOES]-(t_p:Test{positive:True})
WHERE lives.start_date<=date AND (lives.end_date IS NULL OR lives.end_date>date) AND t_p.date<=date
OPTIONAL MATCH (p)-[:DOES]-(t_n:Test{positive:False}) WHERE t_n<=date
WITH city.name AS city, p, max(t_p.time) AS positive_time, max(t_n.time) AS negative_time
WHERE negative_time IS NULL OR positive_time>negative_time
WITH city, count(p) AS infected_count
RETURN city, infected_count
ORDER BY infected_count DESC
LIMIT $n

//problem with person 7 address

//percentge of infected in each city
//population is computed based on the number of people that live in the city
//you may prefer to add the population as an atribute of the city,
//unless you insert in the system even people that aren't using the contact tracing application
:param date => "2021-10-10";
:param n => 3
WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS date
MATCH (city:City)<-[:SITUATED_IN]-(:Place)<-[lives:LIVES]-(p:Person)
WHERE lives.start_date<=date AND (lives.end_date IS NULL OR lives.end_date>date)
WITH city, count(p) AS population, date
OPTIONAL MATCH (city)<-[:SITUATED_IN]-(:Place)<-[lives:LIVES]-(infected:Person)-[:DOES]-(t_p:Test{positive:True})
WHERE lives.start_date<=date AND (lives.end_date IS NULL OR lives.end_date>date) AND t_p.date<=date
OPTIONAL MATCH (infected)-[:DOES]-(t_n:Test{positive:False}) WHERE t_n<=date
WITH city, infected, max(t_p.time) AS positive_time, max(t_n.time) AS negative_time, population
WHERE positive_time IS NULL OR negative_time IS NULL OR positive_time>negative_time
WITH city, count(infected) AS infected_count, population
RETURN city.name, infected_count, population, toFloat(infected_count)/toFloat(population) AS infected_percentage
ORDER BY infected_percentage DESC
LIMIT $n

//first n places ordered by the number of tests performed between two given dates
:param start_date =>"2021-3-3";
:param end_date =>"2021-10-20";
:param n => 4;
WITH datetime({epochmillis:apoc.date.parse($start_date, "ms", "yyyy-MM-dd")}) AS start_date,
	datetime({epochmillis:apoc.date.parse($end_date, "ms", "yyyy-MM-dd")}) AS end_date
MATCH (city:City)<-[:SITUATED_IN]-(place:Place)<-[:PERFORMED_IN]-(t:Test)
WHERE start_date<=t.date<=end_date
WITH city.name AS city, place.address AS address, count(t) AS tests_count
RETURN city, address, tests_count
ORDER BY tests_count DESC
LIMIT $n

//first n places ordered by the number of vaccinations performed between two given dates
:param start_date =>"2021-3-3";
:param end_date =>"2021-10-20";
:param n => 4;
WITH datetime({epochmillis:apoc.date.parse($start_date, "ms", "yyyy-MM-dd")}) AS start_date,
	datetime({epochmillis:apoc.date.parse($end_date, "ms", "yyyy-MM-dd")}) AS end_date
MATCH (city:City)<-[:SITUATED_IN]-(place:Place)<-[:PERFORMED_IN]-(v:Vaccination)
WHERE start_date<=v.date<=end_date
WITH city.name AS city, place.address AS address, count(v) AS vaccinations_count
RETURN city, address,vaccinations_count
ORDER BY vaccinations_count DESC
LIMIT $n




#events that have beome outbreaks (is it the right word?)
#since we don't know where a person was infected,
#we consider that an event is probabily in this category if at least 50% (adjust the value)
#of partecipants where found infected in the following 2 weeks
#possibly we could limit to events in a certian time interval

MATCH (e:Event)-[]-(p:Person)
WHERE #interval for e.start_time if you want to
WITH e, count(p) AS partecipants
MATCH (e)-[]-(i:Person)-[]-(t:test{result:True}) #true means positive
WHERE datetime({epochmillis:apoc.date.parse(t.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse(e.start_time, "ms", "yyyy-MM-dd HH:mm:ss")})) AND datetime({epochmillis:apoc.date.parse(t.time, "ms", "yyyy-MM-dd HH:mm:ss")})>=datetime({epochmillis:apoc.date.parse(e.end_time, "ms", "yyyy-MM-dd HH:mm:ss")}) + duration({days: 14})
WITH e,partecipants,count(i) AS infected
#count i, not p: if a person has taken multiple tests after the event (e.g. he finds that he's infected, after a week tries again to see if he has recovered), it shall be counted once
WHERE infected/partecipants >0.5
ORDER BY infected/partecipants #you may order using anything you want
LIMIT 10 #just a limit if you want
RETURN e


=============================
Number of VaccinatedPositives
=============================



//counts the number of positives who are vaccinated given a certain date
:param input_date => "2021-07-11";
WITH datetime({epochmillis:apoc.date.parse($input_date, "ms", "yyyy-MM-dd")}) AS input_date, duration({days:15}) AS qDays
MATCH (t:Test {positive:True})-[:DOES]-(p:Person)-[:TAKES]-(v:Vaccination)
WHERE input_date >= t.date
    AND t.date >= v.date + qDays
    AND NOT exists{
   	 MATCH (p)-[:DOES]->(t2:Test {positive:False})
   	 WHERE t2.date > t.date
   		 AND t2.date <= input_date
   	 }
RETURN count(distinct p) AS VaccinatedPositives

// I didn't know the possibility of AND NOT exists{query}, maybe we can use that to simply the following query

//percentage of vaccinated at a given date
//a person is considered vaccinated if he/she has taken at least two doses of vaccine
//or a single dose and at least 15 days have passed from the date we are considering
//(we don't consider an expiration date for vaccines)
:param date => "2021-05-21"; //date to consider
WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS date
MATCH (p:Person)
OPTIONAL MATCH (p)-[:TAKES]-(v:Vaccination) WHERE v.date<=date
WITH p, count(v) AS vaccinations, min(v.date) AS first_vaccination_date, date
WITH p, ( CASE vaccinations 
			WHEN 0 THEN null
			WHEN 1 THEN ( CASE duration.inDays(first_vaccination_date,date).days>=15  WHEN True THEN null ELSE 1 END )
			ELSE 1 END
		) AS not_null_if_vaccinated
RETURN count(p) AS people, count(not_null_if_vaccinated) AS vaccinated_people,
	toFloat(count(not_null_if_vaccinated))/toFloat(count(p)) AS vaccinated_percentage

//percentge of vaccinated infected people (over the number of infected) at a given date
//a person is considered vaccinated if he/she has taken at least two doses of vaccine
//or a single dose and at least 15 days have passed from the date we are considering
//(we don't consider an expiration date for vaccines)
:param infection_date => "2021-05-21"; //date to consider
WITH datetime({epochmillis:apoc.date.parse($date, "ms", "yyyy-MM-dd")}) AS infection_date
MATCH (p:Person)-[:DOES]-(t_p:Test{positive:True}) WHERE t_p.date<=infection_date
OPTIONAL MATCH (p)-[:DOES]-(t_n:Test{positive:False}) WHERE t_n.date<=infection_date
OPTIONAL MATCH (p)-[:TAKES]-(v:Vaccination) WHERE v.date<=infection_date
WITH p, max(t_p.date) AS tp, max(t_n.date) AS tf, count(v) AS vaccinations, min(v.date) AS first_vaccination_date, infection_date
WHERE tp>tf
WITH p, ( CASE vaccinations 
			WHEN 0 THEN null
			WHEN 1 THEN ( CASE duration.inDays(first_vaccination_date,infection_date).days>=15  WHEN True THEN null ELSE 1 END )
			ELSE 1 END
		) AS not_null_if_vaccinated
RETURN count(p) AS infected, count(not_null_if_vaccinated) AS vaccinated_infected,
	toFloat(count(not_null_if_vaccinated))/toFloat(count(p)) AS vaccinated_infected_percentage
//note: count(not_null_if_vaccinated) ignores null and count(null)=0



//retrive count of most things
MATCH (p:Person) WITH count(DISTINCT p) AS people
MATCH (c:City) WITH people, count(DISTINCT c) as cities
MATCH (pl:Place) WITH people, cities, count(DISTINCT pl) as places
MATCH (a:Aggregation) WITH people, cities, places, count(DISTINCT a) AS aggregations
MATCH (t:Test) WITH people, cities, places, aggregations, count(DISTINCT t) as tests
MATCH (v:Vaccination) WITH people, cities, places, aggregations, tests, count(DISTINCT v) as vaccinations
MATCH (d:Device) WITH people, cities, places, aggregations, tests, vaccinations, count(DISTINCT d) AS devices
MATCH ()-[m:MEETS]->() WITH people, cities, places, aggregations, tests, vaccinations, devices, count(DISTINCT m) as meets
MATCH ()-[f:FREQUENTS]->() WITH people, cities, places, aggregations, tests, vaccinations, devices, meets, count(DISTINCT f) as frequencies 
MATCH ()-[par:PARTICIPATES]->() 
WITH people, cities, places, aggregations, tests, vaccinations, devices, meets, frequencies, count(par) as participations
MATCH (n)
WITH people, cities, places, aggregations, tests, vaccinations, devices, meets, frequencies, participations, count(DISTINCT n) as nodes
MATCH ()-[r]-()
RETURN people, cities, places, aggregations, tests, vaccinations, devices, meets, frequencies, participations, nodes, count(DISTINCT r) as relationships

MATCH (p:Person) WITH count(DISTINCT p) AS people
MATCH (c:City) WITH people, count(DISTINCT c) as cities
MATCH (pl:Place) WITH people, cities, count(DISTINCT pl) as places
MATCH (a:Aggregation) WITH people, cities, places, count(DISTINCT a) AS aggregations
MATCH (t:Test) WITH people, cities, places, aggregations, count(DISTINCT t) as tests
MATCH (v:Vaccination) WITH people, cities, places, aggregations, tests, count(DISTINCT v) as vaccinations
MATCH (d:Device) WITH people, cities, places, aggregations, tests, vaccinations, count(DISTINCT d) AS devices
RETURN people, cities, places, aggregations, tests, vaccinations, devices

MATCH ()-[m:MEETS]->() WITH count(DISTINCT m) as MEETS
MATCH ()-[f:FREQUENTS]->() WITH MEETS, count(DISTINCT f) as FREQUENTS 
MATCH ()-[par:PARTICIPATES]->() 
RETURN MEETS, FREQUENTS, count(par) as PARTICIPATES

MATCH (n)
WITH count(DISTINCT n) as nodes
MATCH ()-[r]-()
RETURN nodes, count(DISTINCT r) as relationships