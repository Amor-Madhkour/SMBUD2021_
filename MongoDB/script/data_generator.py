# -*- coding: utf-8 -*-

import numpy as np
import datetime
import jsonpickle

import generator_utils as ut
import certificate as certificate_mod
import certificate_subelements as subel
import auth_body as auth_body_mod

class DateToDBHandler(jsonpickle.handlers.BaseHandler):
    """
    Used by jsonpickle to convert date and datetime to the appropriate string for the db
    Convert dates to a string generated by ut.date_to_db
    """
    def flatten(self, obj, data):
        #note: data is "A partially filled dictionary which 
        #will contain the json-friendly representation of obj once this method has finished"
        #I don't understand it... it seems useless, the result depends only on what I return...
        if isinstance(obj, datetime.date):
            value = ut.date_to_db(obj)
        elif isinstance(obj, datetime.datetime):
            value = ut.datetime_to_db(obj)
        return value

class ComplexDateToDBHandler(jsonpickle.handlers.BaseHandler):
    """
    Used by jsonpickle to convert date and datetime to the appropriate string for the db
    Convert dates to {"$date":"date converted by date_to_db}
    Notice that it's not a strign bu a json object
    """
    def flatten(self, obj, data):
        if isinstance(obj, datetime.date):
            value = ut.date_to_db(obj)
        elif isinstance(obj, datetime.datetime):
            value = ut.datetime_to_db(obj)
        data["$date"]=value
        return data #don't ask me why it works, but it works

class GPSPostionToDB(jsonpickle.handlers.BaseHandler):
    def flatten(self, obj, data):
        dictionary = {
            "type":"Point",
            "coordinates" : [obj.longitude,obj.latitude]
            }
        return dictionary

#jsonpickle has some problems when I pass it a list
def write_list(file,values):
    file.writelines("[\n")
    for i in range(len(values)-1):
        file.write(jsonpickle.encode(values[i], unpicklable=False))
        file.write(",\n")
    file.write(jsonpickle.encode(values[-1], unpicklable=False))    
    file.writelines("\n]\n")

#I use np.random and not the python random since some array-wise random funcitons may be useful
CSV_BASE_PATH = "../csv/"


PANDEMY_TIME_INTERVAL = (datetime.date(2021,5,1),datetime.date(2021,7,1)) #compress the range in order no to have tests and contacts too sparse

SMALL_JSON = False

if SMALL_JSON:
    CERTIFICATES_COUNT = (6,7)
    AUTH_BODIES_COUNT = (5,6)
    OUTPUT_PATH = "../json_small/"
else:
    CERTIFICATES_COUNT = (200,250)
    AUTH_BODIES_COUNT = (100,150)
    OUTPUT_PATH = "../json/"


address_generator = ut.AddressGenerator(CSV_BASE_PATH)
names_generator = ut.NamesGenerator(CSV_BASE_PATH)
lots_generator = subel.VaccineLotsGenerator(PANDEMY_TIME_INTERVAL, 100)
employees_generator = subel.MedicalEmployeesGenerator(20, 20, names_generator)

c_factory = certificate_mod.CertificateFactory(PANDEMY_TIME_INTERVAL,
                                               address_generator, names_generator,
                                               lots_generator, employees_generator)

certificates_count  = np.random.randint(CERTIFICATES_COUNT[0],CERTIFICATES_COUNT[1])
certificates = []
for i in range(certificates_count):
    certificates.append(c_factory.generate_certificate(use_person=False,use_lot=False)) #choose here which sub_documents to use
certificates = np.array(certificates)


auth_bodies_factory = auth_body_mod.AuthBodyFactory(address_generator,CSV_BASE_PATH)
auth_bodies_count = np.random.randint(AUTH_BODIES_COUNT[0],AUTH_BODIES_COUNT[1])
auth_bodies = auth_bodies_factory.generate_auth_bodys(auth_bodies_count)


jsonpickle.set_encoder_options('json', indent=4)
jsonpickle.handlers.registry.register(datetime.date, ComplexDateToDBHandler)
jsonpickle.handlers.registry.register(datetime.datetime, ComplexDateToDBHandler)
jsonpickle.handlers.registry.register(ut.GPSPosition, GPSPostionToDB)

#empJSON = jsonpickle.encode(certificates[0], unpicklable=False)
#print(empJSON)

with open(OUTPUT_PATH+"certificates.json", 'w') as f:
    #note that jsonpickle can't encode lists well... it returns null
    write_list(f,certificates)

with open(OUTPUT_PATH+"authorized_bodies.json", 'w') as f:
    #note that jsonpickle can't encode lists well... it returns null
    write_list(f,auth_bodies)

